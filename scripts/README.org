#+TITLE: Scripts Documentation
#+AUTHOR: computeruse
#+DATE: 2024-11-03

* Overview

Essential bootstrap and configuration scripts for the ~aygp-dr/dotanthropic~ environment. These scripts handle initial setup and configuration before the full Nix environment is available.

* Scripts

** bootstrap.sh
Core environment bootstrapping script.

*** Purpose
- SSH key generation and configuration
- GitHub key registration
- Basic environment validation

*** Usage
#+begin_src shell
# With token from environment
export GITHUB_TOKEN="your-token"
./bootstrap.sh

# With token from secrets.json
export GITHUB_TOKEN=$(jq -r '.github_token' ~/.anthropic/secrets.json)
./bootstrap.sh
#+end_src

*** Key Features
- Idempotent operation (safe to run multiple times)
- Unique key naming with timestamps
- Existing key detection
- Proper permission handling

*** Example Output
#+begin_src shell
Checking SSH configuration...
SSH key already exists at ~/.ssh/id_rsa
Verifying GitHub SSH key...
Key already registered with GitHub as: computeruse@hostname_20241103_165017
#+end_src

** setup_github.sh
GitHub repository configuration script.

*** Purpose
- Configure git remotes
- Set up branch tracking
- Establish initial repository state

*** Usage
#+begin_src shell
# After running bootstrap.sh
./setup_github.sh
#+end_src

*** Key Features
- Safe remote configuration
- Main branch setup
- Push protection handling

* Script Design Principles

** Minimalism
- Use basic shell commands only
- No dependencies on full environment
- Single responsibility per script

** Safety
- Always check preconditions
- Handle errors gracefully
- Provide clear feedback

** Idempotency
- Safe to run multiple times
- Check existing state
- No duplicate operations

* Development Guidelines

** Adding New Scripts
1. Follow naming convention: =descriptive_name.sh=
2. Add comprehensive header comments:
   #+begin_src shell
   #!/bin/bash
   #
   # Script: script_name.sh
   # Purpose: Brief description
   # Usage: How to use
   # Dependencies: Any requirements
   #+end_src
3. Include in this README

** Testing
- Test with clean environment
- Verify idempotency
- Check error conditions

** Style Guide
- Use =shellcheck= for validation
- Follow [[https://google.github.io/styleguide/shellguide.html][Google Shell Style Guide]]
- Include usage examples

* Common Patterns

** Token Handling
#+begin_src shell
if [ -z "${GITHUB_TOKEN:-}" ]; then
    echo "Error: GITHUB_TOKEN not set"
    exit 1
fi
#+end_src

** Permission Setting
#+begin_src shell
mkdir -p ~/.ssh
chmod 700 ~/.ssh
chmod 600 ~/.ssh/id_rsa
#+end_src

** Status Checking
#+begin_src shell
if command -v tool >/dev/null 2>&1; then
    echo "Tool available"
else
    echo "Tool missing"
fi
#+end_src

* Troubleshooting

** Common Issues
| Issue                    | Solution                                    |
|-------------------------+---------------------------------------------|
| Permission denied       | Check file permissions and ownership        |
| Token invalid          | Verify GITHUB_TOKEN is set and valid        |
| Key already exists     | Safe to proceed, key is already registered   |
| Remote exists         | Use ~git remote set-url~ to update          |

** Debug Mode
Run scripts with debug output:
#+begin_src shell
bash -x script.sh
#+end_src

* Maintenance

** Adding New Keys
Keys are automatically timestamped:
#+begin_src shell
computeruse@hostname_YYYYMMDD_HHMMSS
#+end_src

** Cleaning Up
Old keys can be removed via GitHub settings:
#+begin_src shell
gh api -X DELETE /user/keys/:key_id
#+end_src

* Security Notes

** Token Handling
- Never commit tokens
- Use environment variables or secrets.json
- Rotate tokens regularly

** Key Management
- Keys are unique per resurrection
- Old keys remain valid
- Manual cleanup may be needed

* Future Improvements

** Planned
- [ ] Key rotation automation
- [ ] Better error reporting
- [ ] Configuration validation
- [ ] State tracking

** Proposed
- [ ] Backup/restore functionality
- [ ] Health checks
- [ ] Integration tests
